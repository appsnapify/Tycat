/**
 * üì± DETECTOR DE PA√çS POR C√ìDIGO DE TELEFONE
 * Seguindo regras @regrascodacy.md - Complexidade m√°xima: 2
 * 
 * Funcionalidades:
 * - Detec√ß√£o autom√°tica do pa√≠s baseada no c√≥digo do telefone
 * - Suporte para os principais pa√≠ses europeus
 * - Fallback seguro para Portugal
 * - Performance otimizada com Map lookup
 */

// ‚úÖ MAPA DE C√ìDIGOS DE PA√çS (Complexidade: 1 - apenas dados est√°ticos)
const COUNTRY_CODE_MAP = new Map<string, string>([
  // Pa√≠ses principais
  ['+351', 'PT'], // Portugal
  ['+34', 'ES'],  // Espanha
  ['+33', 'FR'],  // Fran√ßa
  ['+49', 'DE'],  // Alemanha
  ['+39', 'IT'],  // It√°lia
  ['+44', 'GB'],  // Reino Unido
  ['+41', 'CH'],  // Su√≠√ßa
  ['+43', 'AT'],  // √Åustria
  ['+31', 'NL'],  // Holanda
  ['+32', 'BE'],  // B√©lgica
  
  // Pa√≠ses adicionais
  ['+1', 'US'],     // Estados Unidos/Canad√°
  ['+55', 'BR'],    // Brasil
  ['+54', 'AR'],    // Argentina
  ['+52', 'MX'],    // M√©xico
  ['+86', 'CN'],    // China
  ['+81', 'JP'],    // Jap√£o
  ['+91', 'IN'],    // √çndia
  ['+61', 'AU'],    // Austr√°lia
  ['+7', 'RU'],     // R√∫ssia
  ['+90', 'TR'],    // Turquia
]);

// ‚úÖ NOMES DOS PA√çSES EM PORTUGU√äS
const COUNTRY_NAMES = new Map<string, string>([
  ['PT', 'Portugal'],
  ['ES', 'Espanha'],
  ['FR', 'Fran√ßa'],
  ['DE', 'Alemanha'],
  ['IT', 'It√°lia'],
  ['GB', 'Reino Unido'],
  ['CH', 'Su√≠√ßa'],
  ['AT', '√Åustria'],
  ['NL', 'Holanda'],
  ['BE', 'B√©lgica'],
  ['US', 'Estados Unidos'],
  ['BR', 'Brasil'],
  ['AR', 'Argentina'],
  ['MX', 'M√©xico'],
  ['CN', 'China'],
  ['JP', 'Jap√£o'],
  ['IN', '√çndia'],
  ['AU', 'Austr√°lia'],
  ['RU', 'R√∫ssia'],
  ['TR', 'Turquia'],
]);

// ‚úÖ INTERFACE para informa√ß√µes do pa√≠s
export interface CountryInfo {
  code: string;
  name: string;
  phonePrefix: string;
  isPortugal: boolean;
}

// ‚úÖ FUN√á√ÉO PRINCIPAL: Detectar pa√≠s por telefone (Complexidade: 2)
export const detectCountryFromPhone = (phoneNumber: string): string => {
  // Early return para inputs inv√°lidos
  if (!phoneNumber || typeof phoneNumber !== 'string') {
    return 'PT'; // Default para Portugal
  }
  
  const cleanPhone = phoneNumber.trim();
  
  // Buscar c√≥digo de pa√≠s no mapa
  for (const [prefix, countryCode] of COUNTRY_CODE_MAP) {
    if (cleanPhone.startsWith(prefix)) {
      return countryCode;
    }
  }
  
  // Fallback para Portugal
  return 'PT';
};

// ‚úÖ FUN√á√ÉO UTILIT√ÅRIA: Obter informa√ß√µes completas do pa√≠s (Complexidade: 1)
export const getCountryInfo = (phoneNumber: string): CountryInfo => {
  const countryCode = detectCountryFromPhone(phoneNumber);
  const phonePrefix = getPhonePrefixFromCode(countryCode);
  
  return {
    code: countryCode,
    name: COUNTRY_NAMES.get(countryCode) || 'Desconhecido',
    phonePrefix,
    isPortugal: countryCode === 'PT'
  };
};

// ‚úÖ FUN√á√ÉO UTILIT√ÅRIA: Obter prefixo por c√≥digo de pa√≠s (Complexidade: 1)
const getPhonePrefixFromCode = (countryCode: string): string => {
  for (const [prefix, code] of COUNTRY_CODE_MAP) {
    if (code === countryCode) return prefix;
  }
  return '+351'; // Default para Portugal
};

// ‚úÖ FUN√á√ÉO UTILIT√ÅRIA: Validar se √© telefone portugu√™s (Complexidade: 1)
export const isPortuguesePhone = (phoneNumber: string): boolean => {
  return detectCountryFromPhone(phoneNumber) === 'PT';
};

// ‚úÖ FUN√á√ÉO UTILIT√ÅRIA: Normalizar telefone portugu√™s (Complexidade: 2)
export const normalizePortuguesePhone = (phoneNumber: string): string => {
  if (!phoneNumber) return '';
  
  let cleanPhone = phoneNumber.replace(/\s|-|\(|\)/g, '');
  
  // Se j√° tem +351, retornar como est√°
  if (cleanPhone.startsWith('+351')) return cleanPhone;
  
  // Se come√ßa com 351, adicionar +
  if (cleanPhone.startsWith('351')) return '+' + cleanPhone;
  
  // Se come√ßa com 9 (telem√≥vel portugu√™s), adicionar +351
  if (/^9[1236]\d{7}$/.test(cleanPhone)) return '+351' + cleanPhone;
  
  // Se come√ßa com 0, remover e adicionar +351
  if (cleanPhone.startsWith('09')) return '+351' + cleanPhone.substring(1);
  
  return cleanPhone;
};

// ‚úÖ FUN√á√ÉO UTILIT√ÅRIA: Lista de pa√≠ses suportados (Complexidade: 1)
export const getSupportedCountries = (): CountryInfo[] => {
  return Array.from(COUNTRY_CODE_MAP.values())
    .map(code => ({
      code,
      name: COUNTRY_NAMES.get(code) || code,
      phonePrefix: getPhonePrefixFromCode(code),
      isPortugal: code === 'PT'
    }))
    .sort((a, b) => {
      // Portugal primeiro, depois alfab√©tico
      if (a.isPortugal) return -1;
      if (b.isPortugal) return 1;
      return a.name.localeCompare(b.name);
    });
};

// ‚úÖ FUN√á√ÉO DE DEBUG: Analisar telefone (Complexidade: 1)
export const analyzePhone = (phoneNumber: string) => {
  const countryInfo = getCountryInfo(phoneNumber);
  
  return {
    originalPhone: phoneNumber,
    detectedCountry: countryInfo,
    isValid: phoneNumber.length >= 8,
    isPortuguese: countryInfo.isPortugal,
    normalizedPhone: countryInfo.isPortugal 
      ? normalizePortuguesePhone(phoneNumber) 
      : phoneNumber
  };
};

// ‚úÖ CONSTANTES para configura√ß√£o
export const PHONE_CONFIG = {
  DEFAULT_COUNTRY: 'PT',
  MIN_PHONE_LENGTH: 8,
  MAX_PHONE_LENGTH: 15,
  PORTUGUESE_MOBILE_PREFIXES: ['91', '92', '93', '96']
} as const;
