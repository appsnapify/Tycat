import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

// For√ßar rota din√¢mica para evitar cache
export const dynamic = 'force-dynamic'
export const runtime = 'edge' // Opcional: usar edge runtime para melhor performance

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // Verificar token de autentica√ß√£o
    const token = request.headers.get('authorization')?.replace('Bearer ', '')
    if (!token) {
      console.log('‚ùå Token n√£o fornecido')
      return NextResponse.json({ 
        error: 'Token de autoriza√ß√£o necess√°rio' 
      }, { status: 401 })
    }

    console.log('üîç Buscando sess√£o para token:', token ? '***' : null)

    // Buscar sess√£o ativa do scanner
    const { data: session, error: sessionError } = await supabase
      .from('scanner_sessions')
      .select(`
        id,
        status,
        created_at,
        expires_at,
        event_scanners!inner(
          id,
          event_id,
          scanner_name,
          is_active
        )
      `)
      .eq('session_token', token)
      .eq('status', 'active')
      .single()

    if (sessionError || !session) {
      console.log('‚ùå Sess√£o inv√°lida:', sessionError)
      return NextResponse.json({ 
        error: 'Sess√£o inv√°lida' 
      }, { status: 401 })
    }

    // Verificar se o scanner est√° ativo
    if (!session.event_scanners?.is_active) {
      console.log('‚ùå Scanner inativo')
      return NextResponse.json({ 
        error: 'Scanner inativo' 
      }, { status: 403 })
    }

    const event_id = session.event_scanners?.event_id
    if (!event_id) {
      console.log('‚ùå Evento n√£o encontrado')
      return NextResponse.json({ 
        error: 'Evento n√£o encontrado' 
      }, { status: 400 })
    }

    console.log('üìä Buscando stats para evento:', event_id)

    // Buscar total de convidados e check-ins do evento
    const { data: stats, error: statsError } = await supabase
      .from('guests')
      .select('id, checked_in', { count: 'exact' })
      .eq('event_id', event_id)

    if (statsError) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', statsError)
      return NextResponse.json({ 
        error: 'Erro ao buscar estat√≠sticas' 
      }, { status: 500 })
    }

    // Garantir que stats √© um array
    const guestArray = Array.isArray(stats) ? stats : []
    
    // Calcular totais
    const total = guestArray.length
    const checkedIn = guestArray.filter(guest => guest.checked_in).length

    console.log('üìä Stats calculadas:', { total, checkedIn })

    // üßπ LIMPEZA PREVENTIVA: Remover sess√µes expiradas automaticamente
    const cleanupResult = await supabase
      .from('scanner_sessions')
      .update({ status: 'expired' })
      .eq('scanner_id', session.event_scanners?.id)
      .eq('status', 'active')
      .lt('expires_at', new Date().toISOString())

    if (cleanupResult.count && cleanupResult.count > 0) {
      console.log(`üßπ Limpeza preventiva: ${cleanupResult.count} sess√µes expiradas removidas`)
    }

    // ‚è∞ EXTENS√ÉO AUTOM√ÅTICA: Estender sess√£o se est√° pr√≥xima do fim
    const sessionExpiresAt = new Date(session.expires_at || session.created_at)
    const now = new Date()
    const hoursUntilExpiry = (sessionExpiresAt.getTime() - now.getTime()) / (1000 * 60 * 60)

    let sessionUpdate: any = { 
      last_activity: new Date().toISOString() 
    }

    // Se a sess√£o expira em menos de 2 horas, estender por mais 24h
    if (hoursUntilExpiry < 2) {
      const newExpiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000)
      sessionUpdate.expires_at = newExpiresAt.toISOString()
      console.log('‚è∞ Sess√£o estendida automaticamente at√©:', newExpiresAt.toISOString())
    }

    // Atualizar √∫ltima atividade (e possivelmente estender sess√£o)
    const { error: updateError } = await supabase
      .from('scanner_sessions')
      .update(sessionUpdate)
      .eq('id', session.id)

    if (updateError) {
      console.error('‚ö†Ô∏è Erro ao atualizar sess√£o (n√£o cr√≠tico):', updateError)
    }

    return NextResponse.json({
      success: true,
      count: total,
      checkedIn: checkedIn
    })

  } catch (error) {
    console.error('‚ùå Erro ao buscar estat√≠sticas:', error)
    return NextResponse.json({ 
      error: 'Erro interno do servidor' 
    }, { status: 500 })
  }
} 